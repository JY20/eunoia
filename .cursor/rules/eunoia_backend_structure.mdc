---
alwaysApply: true
---
# Eunoia Backend Structure Guide

This guide provides a comprehensive overview of the `eunoia_backend` Django application structure, models, APIs, and key functionality.

## Project Architecture

The Eunoia backend is a Django REST API that serves as the data layer for a blockchain-based charitable giving platform. It integrates with Aptos blockchain and provides AI-powered features for charity discovery and analysis.

### Core Technologies
- **Django**: Web framework with ORM and admin interface
- **Django REST Framework**: API endpoints for React frontend
- **OpenAI**: AI-powered charity analysis and semantic search
- **Aptos SDK**: Blockchain transaction handling
- **SQLite/PostgreSQL**: Database storage
- **BeautifulSoup**: Web scraping for charity data
- **Scikit-learn**: Machine learning for similarity search

## File Structure Overview

```
eunoia_backend/
├── [manage.py](mdc:eunoia_backend/manage.py)                    # Django management script
├── [requirements.txt](mdc:eunoia_backend/requirements.txt)       # Python dependencies
├── [startup.sh](mdc:eunoia_backend/startup.sh)                 # Setup automation script
├── [create_charity.py](mdc:eunoia_backend/create_charity.py)    # Sample data creation
├── eunoia_backend/                                             # Django project config
│   ├── [settings.py](mdc:eunoia_backend/eunoia_backend/settings.py)  # Core Django settings
│   ├── [urls.py](mdc:eunoia_backend/eunoia_backend/urls.py)           # Main URL routing
│   ├── [wsgi.py](mdc:eunoia_backend/eunoia_backend/wsgi.py)           # WSGI deployment config
│   └── [asgi.py](mdc:eunoia_backend/eunoia_backend/asgi.py)           # ASGI async config
├── main/                                                       # Primary Django app
│   ├── [models.py](mdc:eunoia_backend/main/models.py)               # Database models
│   ├── [views.py](mdc:eunoia_backend/main/views.py)                 # Template-based views
│   ├── [api_views.py](mdc:eunoia_backend/main/api_views.py)         # REST API endpoints
│   ├── [serializers.py](mdc:eunoia_backend/main/serializers.py)     # DRF serializers
│   ├── [admin.py](mdc:eunoia_backend/main/admin.py)                 # Django admin config
│   ├── [forms.py](mdc:eunoia_backend/main/forms.py)                 # Django forms
│   ├── [utils.py](mdc:eunoia_backend/main/utils.py)                 # AI/ML utilities
│   ├── [urls.py](mdc:eunoia_backend/main/urls.py)                   # App URL routing
│   └── migrations/                                             # Database migrations
├── templates/                                                  # HTML templates
│   ├── [base.html](mdc:eunoia_backend/templates/base.html)           # Base template
│   └── [home.html](mdc:eunoia_backend/templates/home.html)           # Landing page
└── media/                                                     # User uploads
```

## Database Models

### Core Models

#### Charity Model
The primary entity representing charitable organizations:

```python
# Key fields from models.py
name = CharField(max_length=255)
description = TextField()  # AI-generated from website
aptos_wallet_address = CharField(max_length=100)
polkadot_wallet_address = CharField(max_length=100)
category = CharField(choices=CharityCategory.choices)
is_verified = BooleanField(default=False)
keywords = JSONField()  # AI-extracted keywords
embedding = JSONField()  # Vector embedding for search
```

**Categories**: Environment, Education, Health, Animals, Arts, Human Rights, Community, Disaster Relief, Other

#### Related Models
- **Impact**: One-to-one with Charity, stores impact metrics and statements
- **MarketingCampaign**: Marketing campaigns for charities
- **SocialPost**: Social media posts linked to campaigns
- **DonationTransaction**: Blockchain transaction records

## API Architecture

### REST Endpoints

The API follows RESTful principles with Django REST Framework:

```
/api/charities/                    # Charity CRUD operations
/api/impacts/                      # Impact report management  
/api/marketing-campaigns/          # Campaign management
/api/social-posts/                 # Social media post tracking
/api/donation-transactions/        # Transaction records
```

### Custom API Endpoints

```
/api/prepare-donation-transaction/  # Creates Aptos transaction payloads
/api/charity-semantic-search/       # AI-powered charity discovery
```

### Key API Views

#### CharityViewSet ([api_views.py](mdc:eunoia_backend/main/api_views.py))
- Full CRUD operations for charity management
- Filters for verified charities
- Supports pagination

#### PrepareDonationTransactionView
- Generates Aptos blockchain transaction payloads
- Validates donation parameters
- Returns structured transaction data for frontend wallet integration

#### CharitySemanticSearchView  
- AI-enhanced charity search using OpenAI embeddings
- Query enhancement and similarity matching
- Returns ranked results with combined mission statements

## AI-Powered Features

### Charity Analysis ([utils.py](mdc:eunoia_backend/main/utils.py))

The backend includes sophisticated AI features for charity data processing:

#### Website Processing
```python
def process_charity_website(charity: Charity) -> None:
    # 1. Web scraping with BeautifulSoup
    # 2. Text extraction and cleaning
    # 3. OpenAI structured data extraction
    # 4. Embedding generation for search
    # 5. Auto-categorization and keyword extraction
```

#### Semantic Search
```python
def enhance_query_and_search(user_query: str, top_k: int = 5) -> List[Charity]:
    # 1. Query enhancement with OpenAI
    # 2. Embedding generation
    # 3. Cosine similarity matching
    # 4. Threshold-based filtering
```

### Pydantic Models for Structured AI Output
- **CharityInfo**: Extracts name, summary, activities, keywords, category, tagline
- **EnhancedQuery**: Improves search queries with AI
- **CombinedCharityMission**: Generates unified mission statements

## Blockchain Integration

### Aptos Integration
- **Smart Contract**: Module address `0x3940277b22c1fe2c8631bdce9dbcf020c3b8240a5417fa13ac21d37860f88011`
- **Functions**: `donate`, `add_charity`
- **Transaction Payload Generation**: Creates structured payloads for frontend wallet adapters

### Admin Blockchain Operations ([admin.py](mdc:eunoia_backend/main/admin.py))
- Bulk charity verification
- On-chain charity registration via Aptos CLI
- Error handling for common blockchain issues

## Frontend Integration

### CORS Configuration
- Enabled for all origins in development
- Supports React frontend communication
- Handles preflight requests

### Media File Serving
- Charity logos and registration documents
- URL generation in serializers
- Development static file serving

## Development Workflow

### Setup Process ([startup.sh](mdc:eunoia_backend/startup.sh))
1. Virtual environment creation
2. Dependency installation
3. Database migrations
4. Superuser creation
5. Sample data loading
6. Development server startup

### Key Development Files
- **[manage.py](mdc:eunoia_backend/manage.py)**: Standard Django management
- **[create_charity.py](mdc:eunoia_backend/create_charity.py)**: Sample data creation
- **migrations/**: Database schema evolution

## Configuration and Settings

### Environment Variables ([settings.py](mdc:eunoia_backend/eunoia_backend/settings.py))
- `OPENAI_API_KEY`: Required for AI features
- `DEBUG`: Development/production mode
- `ALLOWED_HOSTS`: Production deployment hosts

### Key Settings
- **Database**: SQLite for development, PostgreSQL for production
- **CORS**: Configured for React frontend
- **REST Framework**: Pagination and permissions
- **Media Files**: Upload handling for charity assets

## Security Considerations

- API permissions configured for public access (development)
- File upload validation for charity documents
- Environment-based configuration
- CORS security for cross-origin requests

## Extending the Backend

### Adding New Models
1. Define model in [models.py](mdc:eunoia_backend/main/models.py)
2. Create serializer in [serializers.py](mdc:eunoia_backend/main/serializers.py)
3. Add ViewSet in [api_views.py](mdc:eunoia_backend/main/api_views.py)
4. Register in [admin.py](mdc:eunoia_backend/main/admin.py)
5. Update URL routing in [urls.py](mdc:eunoia_backend/main/urls.py)

### AI Feature Extension
- Add new Pydantic models for structured output
- Extend [utils.py](mdc:eunoia_backend/main/utils.py) with new AI functions
- Configure OpenAI tools and function calling
- Implement error handling and fallbacks

### Blockchain Integration
- Extend smart contract integration in [api_views.py](mdc:eunoia_backend/main/api_views.py)
- Add new blockchain networks in models
- Update admin actions for on-chain operations