---
description: 
globs: 
alwaysApply: true
---
# Summary of `README.md`

This file provides a comprehensive overview of the Eunoia project.

**Project Goal:** Eunoia is a radically transparent, advocate-centered giving platform built on the Aptos blockchain. It aims to allow donors to track donations in real-time and reduce intermediary fees, enabling funds to reach individuals like missionaries or independent charity workers directly.

**Key Problems Addressed:**
*   Lack of transparency in traditional charitable giving.
*   High intermediary fees.
*   Delays in funds reaching recipients.

**Core Features:**
*   **Radical Transparency:** All transactions on Aptos blockchain.
*   **Direct Giving:** Minimizing middlemen.
*   **Low Fees:** Reduced transaction costs.
*   **Real-time Tracking:** Donors can see the fund's journey.
*   **Advocate-Centered:** Empowering individual charity workers.
*   **Optional Impact Surcharge (0.20%):** Funds platform growth and marketing.
*   **Secure Platform:** Utilizes Aptos network security.
*   **User-Friendly Interface:** Modern UI/UX.

**Technology Stack:**
*   **Frontend (`eunoia_web`):**
    *   React (Hooks, Context API)
    *   React Router
    *   Material UI (MUI)
    *   Axios
    *   Aptos Wallet Adapter
*   **Backend (`eunoia_backend`):**
    *   Django (Python)
    *   Django REST Framework
    *   Django ORM (SQLite for dev, configurable for PostgreSQL for prod)
    *   Pillow (image processing)
    *   `django-cors-headers`
*   **Blockchain:**
    *   Aptos Network
    *   Move (for smart contracts, managed by a teammate)

**Project Architecture:**
*   **Decoupled Frontend (React) and Backend (Django).**
*   **Frontend:** Handles user interactions, wallet connections, donation initiation. Communicates with Django API and Aptos blockchain.
*   **Backend:** Manages charity data (registration, verification, details), provides REST APIs, handles admin tasks.
*   **Aptos Smart Contract:** (Managed by a teammate) Core logic for receiving and distributing donations.

**Simplified Donation Flow:**
1.  User browses charities (data from Django API).
2.  User connects Aptos wallet.
3.  User initiates a donation.
4.  React frontend interacts with the Aptos smart contract (via wallet adapter) to execute the donation transaction.
5.  Transaction is recorded on the Aptos blockchain.
6.  (Future) Backend might listen to blockchain events or periodically query the contract to update donation records.

**Setup and Installation Guide:**
*   **Prerequisites:** Node.js and npm (or Yarn), Python 3.8+, Pip, Git, An Aptos-compatible wallet.
*   **Backend Setup (`eunoia_backend`):
    1.  Clone repository.
    2.  Navigate to `backend/eunoia_backend`.
    3.  Create and activate virtual environment.
    4.  Install dependencies: `pip install -r requirements.txt`.
    5.  Apply migrations: `python manage.py migrate`.
    6.  Create superuser: `python manage.py createsuperuser`.
    7.  (Optional) Load initial sample data.
*   **Frontend Setup (`eunoia_web`):
    1.  Navigate to `eunoia_web`.
    2.  Install dependencies: `npm install` (or `yarn install`).

**Running the Application:**
1.  **Start Django Backend:** Navigate to `backend/eunoia_backend`, activate venv, run `python manage.py runserver`.
2.  **Start React Frontend:** Navigate to `eunoia_web`, run `npm start`.

**Key Functionalities Explained:**
*   **Charity Registration:** Via frontend to backend API, or Django Admin. Admins verify.
*   **Donation Process:** User connects wallet, browses, donates via frontend to Aptos smart contract.
*   **Transparency:** On-chain transactions, verified charities, direct fund flow goal.

**Contributing:** Standard fork, branch, commit, push, PR workflow.

**License:** MIT License specified.
